Aspect Oriented Programming:
----------------------------

Extending the existing classes without touching the existing code base.

Make a normal java project, have a main class called main and a class called Camera with method called snapped
and configure it to maven. Add the dependencies:
						1. core
						2. beans
						3. context
						4. aspects (new bean added)


Make a bean called camera in the beans tab. In the main, class this instantiate the bean for camera and call the snap method.
Now make a Logger class in the same package and have a method called aboutToTakePhoto(). 

The main idea is that when ever the snap method is called the aboutToTakePhoto() method need to be executed before that snap 
method. In normal java we cannot do this without modifying the Camera class. We are gonna turn the Logger class into a aspect 
which is gonna advice the Camera class.


AspectJ is for doing the aspect oriented programming in java aside from spring. Spring supports part of aspectJ.


Logger Class is called aspect and the method aboutToTakePhoto() is called advise. aboutToTakePhoto() method will advise the snap
method.
JoinPoint is a point in the program where the aspect can advise. AspectJ supports number of joinpoint while spring supports one 
type of joinpoint, that's method execution joinpoint.

PointCut defines the joinPoint where we are gonna run the code. We need pointCut to define the snap method as the joinPoint.

Steps:
	Make a bean for aspect Logger as logger.
	In the namespace, check the aop.
	Go to the aop tab and right click the bean and select aop config element.
			Here we need to define the pointcut and the aspect
	Right click the aop config beans and select the pointcut, set some id, say, camerasnap and expression as
		execution(void com.kushal.spring.aop.Camera.snap())
		This defines the pointcut, where the advise needs to come.
	Now right click the config bean and select aspect and set the id as say, loggeraspect and ref as the logger. Here the logger 
	is the bean we defined earlier.
	Right click the aspect bean and select the execution option, say select the aop:before element and set the pointcut-ref as 
	camerasnap and method as aboutToTakePhoto. 

If you check the source it should look like:


				<bean id="camera" class="com.kushal.spring.aop.Camera"></bean>
				<bean id="logger" class="com.kushal.spring.aop.Logger"></bean>


				<aop:config>
					<aop:pointcut expression="execution(void com.kushal.spring.aop.Camera.snap())"
						id="camerasnap" />
					<aop:aspect ref="logger" id="loggeraspect">
						<aop:before pointcut-ref="camerasnap" method="aboutToTakePhoto" />
					</aop:aspect>
				</aop:config>

Now, whenever the snap method is called, the aboutToTakePhoto advise from the aspect will be called.

We can also shorten this process by getting rid of the pointcut and using it directly in the aspect. In the beans.xml, aop tab,
delete the point cut and in the before bean in the config, delete the pointcut-ref and put execution(void com.kushal.spring.aop.Camera.snap())
in the pointcut. And the source code will look like:

		<aop:config>
		<aop:aspect ref="logger" id="loggeraspect">
			<aop:before method="aboutToTakePhoto" pointcut="execution(void com.kushal.spring.aop.Camera.snap())" />
		</aop:aspect>
		</aop:config>
This looks consise and cleaner.

Did you think about the main java class.

		Camera camera = (Camera) context.getBean("camera");
		camera.snap();
		//Here it is vital to have the bean named as camera which is just the lower case of the Camera class ;)
		Since there is no Id specified in the Camera class, the default bean is the lower case of the class name.


Annotations based Aspects:
---------------------------
It can be done using the xml or annotations.
What we did till now is using the xml and the pros of using the xml is we don't even have to touch the class files.
Annotations looks cleaner, less configuration.

Get rid of the beans(Camera and logger) in the beans.xml and enable the context in the namespace and enable the
component scan (give the base package) and annotation config. Put the @Component annotation in the logger and Camera class.
It should work now.

Now lets get rid of the xml codes for the aop in the source of beans.xml. Delete the codes for aop and let annotate the aspect
class. We need to annotate with @Aspect annotation. Also need to put the before annotation in the method we want to advise.
The aspect class will look like:

			@Aspect
			@Component
			public class Logger {
				@Before(value="execution(void com.kushal.spring.aop.Camera.snap())")
				public void aboutToTakePhoto() {
					System.out.println("About to take photo ...");
				}
			}

One last step: Go to the aop tab in the beans.xml and right click the bean and select insert aop aspect autoproxy.
Now it will work with annotation completely.


Now what we want to reuse the point cut again and again, it will not be a good practise to use the execution statement again and again.
What we will do is make a dummy method in the aspect class and use a @Pointcut annotation. So when ever we need to use that pointcut
we will call that dummy method.

		@Aspect
		@Component
		public class Logger {

			@Pointcut("execution(void com.kushal.spring.aop.Camera.snap())")
			public void dummy() {
			}

			@Before("dummy()")
			public void aboutToTakePhoto() {
				System.out.println("About to take photo ...");
			}
		}

The source of beans.xml will look like:
			
			<context:annotation-config></context:annotation-config>
			<context:component-scan base-package="com.kushal.spring.aop"></context:component-scan>
			<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	Unlike xml configuration, we need to touch the aspect class.






WildCards in pointCut expression:
----------------------------------
@Pointcut("execution(void com.kushal.spring.aop.Camera.snap(..))")
//Here the .. implies the snap method with any arguments


We can also do like:
	
			@Aspect
			@Component
			public class Logger {
				@Pointcut("execution(void com.kushal.spring.aop.Camera.snap(..))")
				public void dummy() {
				}

				@Pointcut("execution(* com.kushal.spring.aop.Camera.snap(String))") // Here * will allow any return type from the method
				public void dummy1() {
				}

				@Before("dummy()")
				public void aboutToTakePhoto() {
					System.out.println("About to take photo ...");
				}

				@Before("dummy1()")
				public void aboutToTakePhotoWithName() {
					System.out.println("About to take photo with name");
				}
			}


@Component
public class Camera {
	public void snap() {
		System.out.println("snapped");
	}

	public void snap(int exposure) {
		System.out.println("snapped for "+exposure+" milliseconds");
	}
	
	public String snap(String name) {
		System.out.println("snapped with "+name+" camera");
		return name;
	}
}

Output will be like:
		About to take photo ...
		snapped
		About to take photo ...
		snapped for 12 milliseconds
		About to take photo with name
		snapped with Nikon camera


If I define the point cut as:

		@Pointcut("execution(* com.kushal.spring.aop.Camera.*(..))")
		It will advise for any method with any return type, with any method with any arguments in the Camera class.

We can also use * for the class name as well:
		@Pointcut("execution(* com.kushal.spring.aop.*.*(..))")


	We can have wildcard for the package name as well:
		@Pointcut("execution(* *.*.*(..))")	




Advice Types:
-------------

Besides the before advice, we can also have, after (@After).
After advise is also known as final advise and it will run weather or not there is expection in the method.

@AfterReturning advise will run only if the method executes without any expection, normally
@AfterThrowing is just the converse of the @AfterReturning, which will only execute if the method throws some exception


Around Advise:
-------------

	@Around("dummy()")
		public void aroundAdvice(ProceedingJoinPoint p) {
			System.out.println("Around Advice...(before)...");
			try {
				p.proceed();
			} catch (Throwable e) {
				System.out.println("In around advise " + e.getMessage());
			}
			System.out.println("Around Advice...(after)...");
	}

	This is the most powerful one. It can run around the method like before  method and after the method.






Proxies, Interfaces and aspects:
---------------------------------

Spring use proxy to achieve the AOP functionality. So the beans of the target class (Camera) is the instance of some other
class which is a subclass of Camera class. If I do like (camera instanceOf Camera), it will return true. However, if the
Camera class implements any interface, the bean of the target class will no longer be the instance of Camera class and it
will be the instance of the interface(even though it implements more than one interface).

There are two solution:
		1. Change the way the proxy works.
				For this you need to have 	<aop:aspectj-autoproxy></aop:aspectj-autoproxy> tag in the beans.xml
			Go to the aop tab in the beans.xml and in the aspectj-autoproxy, check the proxy-target-class as true.
			This should make the proxy bean an instance of the target class.

			Side Effect:
				It will make two instance of the Camera class and runs the constructor twice.

		2. Go to the camera class and right click the Camera and select the refactor and select Extract Interface.
		   Select all the method over there and name that interface.
		   This should do the trick as it will change the casting in the main method  and also add an interface in the Camrea 
		   class as well.

	Note: However, I didn't face any problems even though I implemented some interfaces in the Camera class.




"Within" PointCut Designator:
------------------------------
@Pointcut("within(com.kushal.spring.aop.camera)")

Suppose I have 3 methods, A, B and C in the Camera class and when ever I invoke these methods in the main method like,
	camera.A();
	camera.B();
	camrea.C();

	Then the within pointcut will be be executed before all the 3 method of the camera class.

We can also do like,
		@Pointcut("within(com.kushal.spring.aop.*)") such that it will run for any method, in any class in the aop package.




This, Target and matching Subpackages:
--------------------------------------

For any subpackage level execution, we can do like:

		@Pointcut("within(com.kushal.spring..*)") //Notice the two dots (..)


Target is specific than the within..it allows to select any method in any class as:
			@Pointcut("target(com.kushal.spring.aop.Camera)")
			public void targetDemo(){
			}
			@Before("targetDemo()")
			public void targetDemoAdvise(){
				System.out.println("*******Before Target advise*******");
			}


	It is simpler to read and it is focused to only one particular class and we cannot use any wildcard here.

Instead of @Pointcut("target(com.kushal.spring.aop.Camera)"), we can also use like
			@Pointcut("target(com.kushal.spring.aop.ICamera)") since the camera bean is also an instance of ICamera interface.


"this" is actually about the type of the bean.
		It is used as @Pointcut("this(com.kushal.spring.aop.Camera*)")

		If the Camera class implements, ICamera interface then the this designator will not do any thing here because in the
		main method we are casting the camera bean into Camera type.
		For 'this' designator to work, we need to use the this designator as:
			@Pointcut("this(com.kushal.spring.aop.ICamera)") because the camera bean is an instance of ICamera interface.




Annotation specific Point Cut Designators(PCD)s:
-------------------------------------------------

Here we are targeting the methods and class with specific annotations.

If I do like:  @Pointcut("within(@Deprecated com.kushal.spring..*)")
 				then this point cut will only work for the classes with @Deprecated annotation.
 				This applies to expression PCD as well.


 A different type of targert PCD:


				@Pointcut("@target(org.springframework.stereotype.Component)")  //Notice the @ sign before the target PCD and it
				targets all the methods within all classes with this component annotations
				public void targetDemo1(){
				}
				@Before("targetDemo1()")
				public void targetDemoAdvise1(){
					System.out.println("*******Before Target advise, annotation based*******");
				}
@within and @target are interchangable for most purpose.


How to target annotations to methods:

	@Pointcut("@annotation(java.lang.Deprecated)") // This is gonna target all methods with deprecated container
	public void targetDemo1() {
	}

	@Before("targetDemo1()")
	public void targetDemoAdvise1() {
		System.out.println("*******Before Target advise, annotation based*******");
	}


@args:
------

	@Pointcut("@args(java.lang.Deprecated)")  //What this does is, it will advice to the method whose argument's class is deprecated.
	public void targetDemo1() {
	}

	@Before("targetDemo1()")
	public void targetDemoAdvise1() {
		System.out
				.println("*******Before Target advise, annotation based*******");
	}

	For instance, we have a method called public void snapCar(Car car){}, and the Car class itself is deprecated as @Deprecated, then it 
	will advice for that method only.



	The bean PCD:
	-------------

	@Pointcut("bean(camera)") // It will advise every method that the bean camera is invoked upon.
	public void targetDemo1() {
	}

	@Before("targetDemo1()")
	public void targetDemoAdvise1() {
		System.out.println("*******Bean OCD*******");
	}

	We can also do like:
			@Pointcut("bean(*camera)") or
			@Pointcut("bean(*am*ra)") or any thing that makes sense.



Args PCD:
----------

Suppose we have snap method overloaded as:
	snap()
	snap(int i)
	snap(double d)
	snap(int i, double d)



	@Pointcut("@args()") //this will target any method with no arguments
	@Pointcut("@args(int)") // methods with int as its only argument
	@Pointcut("@args(int,double)")
	@Pointcut("@args(com.kushal.spring.aop.Car)") // need to have full path to the class
	@Pointcut("@args(int, *)") // two arguments, one int and one can be anything
	@Pointcut("@args(int,..)") //int and zero or more arguments , here .. is called Ellipsis.

	It is not looking for exact type but rather it is looking for types that can be cast to specified type. So, if I do like
	@Pointcut("@args(Object)"), then it is looking for any kind of arguments that can be cast into Object type.
	If you want exactly to look for int only, we need to do like, @Pointcut("@args(Integer)") and so on.
	@Pointcut("@args(double)") will also accept int.




Getting Arguments Using Args:
------------------------------
1. @Pointcut("execution(* com.kushal.spring.aop.Camera.snap())")
	public void dummy() {
	}
	OR 
	@Pointcut("target(com.kushal.spring.aop.Camera)")
	public void dummy() {
	} 
	and then


For around advise we need proceeding joinpoint.

	@Before("dummy()")
	public void beforeAdvice(JoinPoint jp) { // we use joinpoint and invoke methods like getArgs().
											// Need to import import org.aspectj.lang.JoinPoint;
		System.out.println("Before Advice...");
		for (Object obj : jp.getArgs()) {
			System.out.println("Args: " + obj);
		}
	}



2. Using Args PCD
	
	@Pointcut("args(int)")
	public void dummy() {
	}
		@Before("dummy()")
		public void beforeAdvice(JoinPoint jp) { 
		System.out.println("Before Advice...");
		for (Object obj : jp.getArgs()) {
			System.out.println("Args: " + obj);
		}
	}

	
	Or using the binding form:


	@Pointcut("args(exposure)")
	public void dummy(int exposure) {
	}


	@Before("dummy(exposure)")
	public void beforeAdvice(JoinPoint jp, int exposure) {
		System.out.println("Before Advice...");
		System.out.println("exposure: "+ exposure);
	}
	Or:
	@Before("dummy(exposure)")
	public void beforeAdvice(int exposure) { //joinpoint is optional
		System.out.println("Before Advice...");
		System.out.println("exposure: "+ exposure);
	}




Combining PointCuts:
---------------------
	
	@Pointcut("args(exposure)")
	public void dummy(int exposure) {
	}

	@Pointcut("target(com.kushal.spring.aop.Camera)")
	public void dummynew(int exposure) {
	}

	@Before("dummynew() && dummy(exposure)")   //Combined two pointCuts
	public void beforeAdvice(JoinPoint jp, int exposure) {
		System.out.println("Before Advice...");
		System.out.println("exposure: " + exposure);
	}


	Or just like:

	@After("within(com.kushal.spring.aop.*) && @annotation(Deprecated)") // within the aop package and any methods with @Depreated annotation
								// Can also use the OR as || and also use as @After("within(com.kushal.spring.aop.*) && !@annotation(Deprecated)")
	public void someAfterAdvise() {
		System.out.println("After advise running...");
	}


	Added functionality using aspects:
	----------------------------------

	AOP Introduction: lets you add new functionality to your existing beans.

	Suppose we have a simple classes called  Blender and Fan, plus a class called App, aspect called MachineAspect as shown below.


	package com.kushal.spring.introduction;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
	public static void main(String[] args) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
				"com/kushal/spring/introduction/beans.xml");
		Blender blender = (Blender) context.getBean("blender");
		blender.blend();
		Fan fan = (Fan) context.getBean("fan");
		fan.activate(5);
		context.close();
	}
}


package com.kushal.spring.introduction;

import org.springframework.stereotype.Component;

@Component
public class Blender {
	public void blend() {
		System.out.println("Blending...");
	}
}


package com.kushal.spring.introduction;

import org.springframework.stereotype.Component;

@Component
public class Fan {
	public void activate(int a) {
		System.out.println("Fan activated at level " + a);
	}
}

package com.kushal.spring.introduction;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

@Component
@Aspect
public class MachineAspect {
	@Around("within(com.kushal.spring.introduction.*)")
	public void runMachine(ProceedingJoinPoint jp) {
		System.out.println("Running... from aspect...");
		try {
			jp.proceed();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Completed..");
	}
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">


	<context:component-scan
		base-package="com/kushal/spring/introduction">
	</context:component-scan>
	<context:annotation-config></context:annotation-config>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>

Now say, we want the Blender and the Fan classes to implement an interface called Machine. We can do that using the AOP introduction. We need to make
an interface first.

package com.kushal.spring.introduction;

public interface IMachine {
	public void start();
}

and we have a concrete implementation of the IMachine interface as:

package com.kushal.spring.introduction;

public class Machine implements IMachine {

	@Override
	public void start() {
		System.out.println("Machine starting...");
	}

}

Now what we do is make an instance of IMachine in the Aspect as :

	@DeclareParents(value = "com.kushal.spring.introduction.*", defaultImpl = com.kushal.spring.introduction.Machine.class)
	private IMachine machine;

And we have an annotation called as @DeclareParents.
Here, the instance of IMachine tells which interface is going to be implmented. In the annotation, the value tells, who is gonna
implement that interface, and the defaultImpl tells us what is the default implementation gonna be.
Believe it or not the Blender and Fan classes have now implemented the interface called IMachine. Remember, when the beans implements
an interface, it no longer will be the instance of the target class but will be the instance of the interface it implements (or any interface 
if more than one). 
So what we do is refactor the Blender and Fan class and extract interface from there and name the interface as IBlender and Ifan.

Finally in the main app class, the Casting of the beans to Blender and Fan type will be updated to IBlender and IFan types.
Now we can invoke the defaultImplemented method on the beans as:

	((IMachine) blender).start();
	((IMachine) fan).start();

	That's it ! no big deal.