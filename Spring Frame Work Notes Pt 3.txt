Spring MVC:
------------

Largest framework for MCV applications. It helps to organize servlets and JSP.

We need some kind of server and we are using the free tomcat server which is a java application server capable of running java
web applications.


To see which application are using the ports:

netstat -o -n -a | findstr 0.0:80

It will give the PID on the last column and look for that PID in the task manager.
Run the tomcat as admin and stop any other instance of server running and then from the eclipse, try to start the server again.


Dynamic web application:
Choose the web module version as 2.5 instead of 3. Also make sure to select the tomcat server while making the file.
Make sure to check the web.xml deployment descriptor while doing next.
Once the project is created, right click on the project and create a new jsp file. And write something in the JSP file and save it.
Then right click on that jsp file and run as> run on the server and run...you should see a eclipse browser opening up displaying
the text from the jsp file. If you copy the url to the browser, you should see the same thing.
This is the normal, non spring way.

Bringing in Maven:
-------------------
Right click on the project and select configure and choose convert to maven project. Choose the group Id and artifact Id.
Pom.xml file will be created and then add the jars: 
													1. core
													2. beans
													3. context
													4. jdbc
													5. web
													6. webmvc

Then right click on the main project and create a servlet and choose the "Use existing servlet class or JSP", then click browse and choose
the dispatcherServlet.






Applet runs on the client, servlet runs on the server. It's as simple as that.

More specifically, that applet is downloaded to the client, and executes in a JRE inside the browser, and can display whatever it wants 
to display within the applet frame. The servlet instead runs on the server and (generally) produces a HTML page which is displayed in 
your browser.
Applets:
    (Usually) small programs that execute inside of browser.
    Does much, much more than JavaScript
    Harness full power of Java: objects etc.
    An Applet is a client side java program that runs within a Web browser on the client machine.
	An applet can use the user interface classes like AWT or Swing.
	Applet Life Cycle Methods: init(), stop(), paint(), start(), destroy()	

 Servlets:
    Server-side Java component which runs on the web server. 
    The servlet does not have a user interface.
	Servlet Methods: doGet(), doPost() 




Dispatcher Servlet:
---------------------
All the request are routed through the dispatcher servlet. It then looks for controller which addresses the request. After
adding the dispatcher servlet, check the web.xml file, you should see the dispatcher servlet and its mapping. Rename the servlet name
to what you need and also change it in the mapping. Also create a xml file named something-servlets.xml in that web resources folder.
The something here should be the name you just renamed.
Also need to give the project to access the maven dependencies by right click on the project, properties, deployment assembly and goto
add and java build path entries and add maven dependencies.

Adding a Controller:
--------------------
The dispatcher will send the http request to the controller which is responsible for handling the request. So we need a controller. Right on
the project and add a class...put it in some package, say A.
Annotate the class with @Controller ( makes sense right :))
make one method and annotate it with @RequestMapping("/")

the / means that if we go to the root of the webapplication then this controller will be handling it. Now we to make spring load this as a 
bean. Go to the offers-servlet.xml file and go to namespace and check the mvc and context. then add the component scan in the context bean
 and name as the same package, A. And in the mvc tab, create the mvc annotations This will make the @Controller annotation work.

View Resolver:
---------------
We are gonna use the InternalResourceViewResolver class as the view Resolver. First put all the jsp files in a folder inside the Webresources 
folder.
Then go to the offers-servlets and add bean in the beans tab. Give the class name of the bean as org.springframework.web.servlet.view.InternalResourceViewResolver
Then add the properties called prefix and suffix and put the values like /WEB_INF/jsp/ and suffix as .jsp. What is does is the return of the
controller as home to /WEB_INF/jsp/home.jsp
That's it. Simple.



Adding data to session:
------------------------

Session is like a object that persist as long as the user is there or browser is not closed.
We can add data to session object and access the data too.
We can any one of the three ways for inserting the data to the jsp file.

		
	@RequestMapping("/") 
	public String showHome(HttpSession session) {
	session.setAttribute("name", "Kushal Prasad Pradhan"); 
	return "home"; //	this home will be converted as // /WEB-INF/jsps/home.jps using the prefix
						and suffix properties by the // beans }
	

And in the home.jsp file you can do like
			<%= session.getAttribute("name")%>



Using the spring data Models:
-----------------------------
	@RequestMapping("/")
	
	  public ModelAndView showHome() {
	  ModelAndView mv = new ModelAndView("home"); 
	  Map<String, Object> model = mv.getModel();

	  model.put("name", "<b>Wala<b>"); 
	  return mv;
	  }

And in the home.jsp file you can do like
		<%= request.getAttribute("name")%>

It can also be accessed using Expression language as:
		${name}  that's it


Problem here:
---------------

If I put like: 
		session.setAttribute("name", "<b>Kushal Prasad Pradhan<b>");
		OR 
		model.put("name", "<b>Wala<b>"); in the controller file, then it will be displayed in bold, which is not my intent here.
		To address this issue we have to use the JSTL


This is using the spring model object:
----------------------------------------
	
	public String showHome(Model model) {
		model.addAttribute("name", "<b>this name is from Spring default model</b>");
		return "home";
	}



Using the JSTL(JSP standard tag library):
------------------------------------------

Google for jstl core and get this tag:  
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

 and put this tag in the jsp file. Also add the jstl jar (javax.servlet.jstl) in the maven and update the project.

 Then in the jsp file just use like: <c:out value="${name }"></c:out> and in the controller just use the model and model.addAttribute() 
 method.

 This will address the problem we had before. No bold in the value. cout escapes those characters
  c out : and try the CTRL space


 Configuring JNDI data source:
 ------------------------------

 OOOOOoooo this time we are connecting to the database :)

Database Pooling:
Database connection pooling is a method used to keep database connections open so they can be reused by others.
Typically, opening a database connection is an expensive operation, so pooling keeps the connections active so that, when a connection is later requested, one of the active ones is used in preference to opening another one.
In it's simplest form, it's just a similar API call to the real open-connection API which first checks the pool for a suitable connection. If one is available, that's given to the client, otherwise a new one is created.
Similarly, there's a close API call which doesn't actually call the real close-connection, rather it puts the connection into the pool for later use



 It is for creating the connection pool.
 We are gonna configure our project on the server to use a pooled datasource connection. Previously we used the apache dbcp to create a connection 
 pool that we could use to connect to our database.

 JNDI stands for Java Naming and Directory Interface. google for tomcat 7 datasource jndi and click on the link from apache. then find the mysql
 link and then scroll down and find  Context configuration and there copy the resources code as:
 (http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html#MySQL_DBCP_Example)


<Resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource"
maxActive="100" maxIdle="30" maxWait="10000"
username="javauser" password="javadude" driverClassName="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost:3306/javatest"/>

Copy that code and paste it in the context.xml file in the server folder and modify as required as:

<Resource name="jdbc/spring" auth="Container" type="javax.sql.DataSource"
maxActive="100" maxIdle="30" maxWait="10000" username="root"
password="root" driverClassName="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost:3306/springframework" />

here springframework is the name of my database, you can change the name to jdbc/anything

Finally copy the web app code from the same web page as:

<description>MySQL Test App</description>
  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/TestDB</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
</resource-ref>

 and paste it in your project's web.xml file and modify as:

 	<description>Spring Database</description>
	<resource-ref>
		<description>DB Connection</description>
		<res-ref-name>jdbc/spring</res-ref-name>  // need to make sure that the name matches with the name in context.xml
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>


Copy the <%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql" %> from the test code and paste in the home.jsp file

Then copy the sql code and paste it in the home.jsp file and edit to match your database content and database name.

	<sql:query var="rs" dataSource="jdbc/spring">
	select id, name, email, text from offers
	</sql:query>

<br>
	<c:forEach var="row" items="${rs.rows}">
   ID:  ${row.id}<br />
    Name: ${row.name}<br />
	</c:forEach>

Also need to add the mysql connector jar as mysql-connector-java in the pom.xml file


Bringing in the DAO code:
--------------------------
Firstly, what we did is put all the new xml files to a separate package in the java resources but not the web.xml one. 
Here we create a new spring bean configuration file called dao-context.xml and set the context namespace and set
the bean annotation and component scan to the dao package.

Then we will also create a package for the dao beans in the java resources. Here we copied the offers and offersDao file
from old examples.

Then in the next step we need to let spring know that we have established this bean.

Loading the bean container with the contextLoaderListner:
-----------------------------------------------------------
What we are doing here is that we are letting the spring know about the new xml file we created. For that there is a 
file in the spring-web jar file, called contextLoaderListner, so we need to have this listner in the web.xml file.

we add listner tag, can use the ctrl+space to help

<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

Now we need to add the context param to let it know where is the new xml file as:

<context-param>
		<param-name>contextConfigLocation</param-name>
		
		<param-value>
			classpath:com/kushal/springframework/web/config/dao-context.xml
		</param-value>
</context-param>

com/kushal/springframework/web/config/dao-context.xml: is where the new xml is located. The param name has to be contextConfigLocation



Creating a datasource Bean:
----------------------------

What we did here is that we add a jee namespace in the dao-context.xml and in the jee tab, add jndi look up and add id as dataSource and 
jndi-name as jdbc/spring as we set somewhere before, expected type as: javax.sql.DataSource

	<jee:jndi-lookup jndi-name="jdbc/spring" id="dataSource"
		expected-type="javax.sql.DataSource">
	</jee:jndi-lookup>

Now what we want to do is use jndi to access the database using DAO and pass it to the model. for that we are gonna add a service layer
in the controller. (Rather than just jstl connecting to our jndi datasource)


Adding a service layer:
----------------------
lots of steps

	first create a package for the service files in the java resources and create a class called OffersService and put the
	annotation @ service over there.
	Add method called, public List<Offers> getCurrent(){} to list all the offer objects. TO get the list of offers we will need
	a offerDAO, so make an instance of private offersDAO and also create a set method for the offersDAO and autowire that method.

	We need a xml file to load this service object, so create a springbean config file in the config package and check the
	context namespace and in there add the annotation and the compnenet scan and put the base package as service package.

	Now in the web.xml we need the spring to load this new xml file and over there just add a line just below the classpath: line.

	Controller needs a way to get hold of the service so we make instance of offersService and set the setter method for it and autowire it.
	Now in the main showHome method, get the list of offers object using the offersService and  use the model to setAttribute as offers object
	itself.

	Finally in the home.jsp there needs to be a foreach loop to iterate through the offers list



	That's it for now....now we are moving on to the web forms, HTML and some CSS.
	Next notes on the review 2.
